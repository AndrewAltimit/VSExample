name: TFS-Style Build Pipeline

on:
  push:
    branches: [ main, master, claude-code ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  SOLUTION_FILE: VSExample.sln
  BUILD_CONFIGURATION: Release
  BUILD_PLATFORM: "Any CPU"

jobs:
  build-and-test:
    name: Build and Test (.NET Framework 4.6.1)
    runs-on: windows-2022
    
    steps:
    - name: 🔍 Get Sources (TFS: Get Latest)
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: 📋 Display Build Information
      run: |
        echo "Build Number: ${{ github.run_number }}"
        echo "Source Branch: ${{ github.ref }}"
        echo "Commit SHA: ${{ github.sha }}"
        echo "Build Agent: ${{ runner.os }} - ${{ runner.name }}"
        echo "Repository: ${{ github.repository }}"
        
    - name: 🔧 Install Visual Studio 2017 Build Tools
      run: |
        Write-Host "Installing Visual Studio 2017 Build Tools..."
        
        # Download VS 2017 Build Tools installer
        Invoke-WebRequest -Uri https://aka.ms/vs/15/release/vs_buildtools.exe -OutFile vs_buildtools.exe
        
        # Install VS 2017 Build Tools with required workloads
        Start-Process -FilePath .\vs_buildtools.exe -ArgumentList @(
          '--quiet',
          '--wait',
          '--norestart',
          '--nocache',
          '--add', 'Microsoft.VisualStudio.Workload.MSBuildTools',
          '--add', 'Microsoft.VisualStudio.Workload.NetCoreBuildTools',
          '--add', 'Microsoft.Component.MSBuild',
          '--add', 'Microsoft.Net.Component.4.8.TargetingPack',
          '--add', 'Microsoft.Net.Component.4.6.1.TargetingPack',
          '--add', 'Microsoft.VisualStudio.Component.NuGet.BuildTools',
          '--add', 'Microsoft.VisualStudio.Component.TestTools.BuildTools'
        ) -Wait -PassThru
        
        Write-Host "VS 2017 Build Tools installation completed"
        
        # Set environment variables
        $vs2017Path = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2017\BuildTools"
        echo "VS2017_PATH=$vs2017Path" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "$vs2017Path\MSBuild\15.0\Bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
    - name: 📦 Setup NuGet
      uses: NuGet/setup-nuget@v1.1.1
      
    - name: 🔄 Restore NuGet Packages (TFS: NuGet Restore)
      run: |
        nuget restore "${{ env.SOLUTION_FILE }}" -Verbosity detailed
        
    - name: 🏗️ Build Solution (TFS: Visual Studio Build)
      run: |
        # Use VS 2017 MSBuild explicitly
        & "${{ env.VS2017_PATH }}\MSBuild\15.0\Bin\MSBuild.exe" "${{ env.SOLUTION_FILE }}" `
          /p:Configuration="${{ env.BUILD_CONFIGURATION }}" `
          /p:Platform="${{ env.BUILD_PLATFORM }}" `
          /p:VisualStudioVersion=15.0 `
          /p:DeployOnBuild=true `
          /p:WebPublishMethod=Package `
          /p:PackageAsSingleFile=true `
          /p:SkipInvalidConfigurations=true `
          /t:Build `
          /v:normal `
          /m
          
    - name: 🧪 Setup VSTest
      run: |
        # VSTest.console.exe is included with VS 2017 Build Tools
        $vsTestPath = "${{ env.VS2017_PATH }}\Common7\IDE\Extensions\TestPlatform"
        echo "$vsTestPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      
    - name: 🧪 Run Unit Tests (TFS: Visual Studio Test)
      run: |
        # Use VS 2017 VSTest.console.exe
        & "${{ env.VS2017_PATH }}\Common7\IDE\Extensions\TestPlatform\vstest.console.exe" `
          "HelloWorld.Tests\bin\${{ env.BUILD_CONFIGURATION }}\HelloWorld.Tests.dll" `
          /Logger:trx `
          /ResultsDirectory:TestResults
          
    - name: 📊 Publish Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults\*.trx
        
    - name: 📦 Copy Files to Staging (TFS: Copy Files)
      run: |
        New-Item -ItemType Directory -Force -Path staging
        Copy-Item -Path "HelloWorld\bin\${{ env.BUILD_CONFIGURATION }}\*" -Destination "staging\" -Recurse
        
    - name: 📤 Publish Build Artifacts (TFS: Publish Artifact)
      uses: actions/upload-artifact@v4
      with:
        name: drop
        path: staging\
        
    - name: 📊 Build Summary
      if: always()
      run: |
        echo "## Build Summary" >> $env:GITHUB_STEP_SUMMARY
        echo "- Solution: ${{ env.SOLUTION_FILE }}" >> $env:GITHUB_STEP_SUMMARY
        echo "- Configuration: ${{ env.BUILD_CONFIGURATION }}" >> $env:GITHUB_STEP_SUMMARY
        echo "- Platform: ${{ env.BUILD_PLATFORM }}" >> $env:GITHUB_STEP_SUMMARY
        echo "- Build Number: ${{ github.run_number }}" >> $env:GITHUB_STEP_SUMMARY
        echo "- Status: ${{ job.status }}" >> $env:GITHUB_STEP_SUMMARY